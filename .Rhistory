y[i] ~ dnorm(mu_j[j], invsigma2[j])
invsigma2 <- n[j]/(sigma*sigma)
}
## priors
for (j in 1:N){
mu_j[j] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(20, 1/.001)
invtau2 ~ dgamma(.1, .1)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
N = length(y)
data <- list("y" = y, "n" = n, "N" = N)
jm <- jags.model("normal-normal-gamma.jags", data = data, quiet = TRUE)
y <- c(23.56, 18.07, 16.21, 21.70, 22.32, 14.11)
n <- c(731, 570, 491, 456, 403, 274)
cat("
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(mu_i[i], invsigma2[i])
invsigma2 <- n[i]/(sigma*sigma)
}
## priors
for (i in 1:N){
mu_i[i] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(20, 1/.001)
invtau2 ~ dgamma(.1, .1)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
N = length(y)
data <- list("y" = y, "n" = n, "N" = N)
jm <- jags.model("normal-normal-gamma.jags", data = data, quiet = TRUE)
library(rjags)
y <- c(23.56, 18.07, 16.21, 21.70, 22.32, 14.11)
n <- c(731, 570, 491, 456, 403, 274)
cat("
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(mu_i[i], invsigma2[i])
invsigma2 <- n[i]/(sigma*sigma)
}
## priors
for (i in 1:N){
mu_i[i] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(20, 1/.001)
invtau2 ~ dgamma(.1, .1)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
N = length(y)
data <- list("y" = y, "n" = n, "N" = N, "sigma" = 5.5)
jm <- jags.model("normal-normal-gamma.jags", data = data, quiet = TRUE)
cat("
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(mu_i[i], invsigma2[i])
invsigma2[i] <- n[i]/(sigma*sigma)
}
## priors
for (i in 1:N){
mu_i[i] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(20, 1/.001)
invtau2 ~ dgamma(.1, .1)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
N = length(y)
data <- list("y" = y, "n" = n, "N" = N, "sigma" = 5.5)
jm <- jags.model("normal-normal-gamma.jags", data = data, quiet = TRUE)
samps <- coda.samples(jm, "mu_i[i]", n.iter = 10000)
samps <- coda.samples(jm, "mu", n.iter = 10000)
ests <- summary(samps, quantiles = c(.025, .975))
ests
# Chapter 10 HW Problems: 1,2,4,7,10
library(ggplot2)
library(gridExtra)
library(ProbBayes)
library(VGAM)
library(tidyverse)
library(coda)
library(reshape2)
library(ggridges)
library(rjags)
#1 mean time-to-serve for six professionals
#a) Find Murray estimate for mean time-to-serve using only his data
Murray <- 23.56
n <- 731
sigma <- 5.5
priorM <- c(20,10)
dataM <- c(Murray, sigma/n^.5)
normal_update(priorM, dataM)
qnorm(c(.05,.95), 23.56, .203)
prior <- c(20,10)
data <- c(19.9, 5.5/2925^.5)
normal_update(prior, data)
#19.9, .102
qnorm(c(.05,.95), 19.9, .102)
N = length(y)
sigma <- c(5.5/sqrt(n[1]), 5.5/sqrt(n[2]), 5.5/sqrt(n[3]), 5.5/sqrt(n[4]),
5.5/sqrt(n[5]), 5.5/sqrt(n[6]))
sigma
y <- c(23.56, 18.07, 16.21, 21.70, 22.32, 14.11)
n <- c(731, 570, 491, 456, 403, 274)
N = length(y)
sigma <- c(5.5/sqrt(n[1]), 5.5/sqrt(n[2]), 5.5/sqrt(n[3]), 5.5/sqrt(n[4]),
5.5/sqrt(n[5]), 5.5/sqrt(n[6]))
sigma
invsigma2 = 1/(sigma^2)
invsigma2
y <- c(23.56, 18.07, 16.21, 21.70, 22.32, 14.11)
n <- c(731, 570, 491, 456, 403, 274)
modelString("
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(mu_i[i], invsigma2[i])
invsigma2[i] <- n[i]/(sigma*sigma)
}
## priors
for (i in 1:N){
mu_i[i] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(mu0, g0)
invtau2 ~ dgamma(a_t, b_t)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
N = length(y)
sigma <- c(5.5/sqrt(n[1]), 5.5/sqrt(n[2]), 5.5/sqrt(n[3]), 5.5/sqrt(n[4]),
5.5/sqrt(n[5]), 5.5/sqrt(n[6]))
invsigma2 = 1/(sigma^2)
data <- list("y" = y, "n" = n, "N" = N, "invsigma2" = invsigma2, "mu0" = 20,
"g0" = 1/0.001, "a_t" = 0.1, "b_t" = 0.1)
jm <- jags.model("normal-normal-gamma.jags", data = data, quiet = TRUE)
samps <- coda.samples(jm, "mu", n.iter = 10000)
samps <- coda.samples(jm, variable.names = "mu", n.iter = 10000)
modelString("
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(mu_i[i], invsigma2[i])
invsigma2[i] <- n[i]/(sigma*sigma)
}
## priors
for (i in 1:N){
mu_i[i] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(20, 1/.001)
invtau2 ~ dgamma(.1, .1)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
modelString("
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(mu_i[i], invsigma2[i])
invsigma2[i] <- n[i]/(sigma*sigma)
}
## priors
for (i in 1:N){
mu_i[i] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(20, 1/.001)
invtau2 ~ dgamma(.1, .1)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
cat("
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(mu_i[i], invsigma2[i])
invsigma2[i] <- n[i]/(sigma*sigma)
}
## priors
for (i in 1:N){
mu_i[i] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(20, 1/.001)
invtau2 ~ dgamma(.1, .1)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
N = length(y)
sigma <- c(5.5/sqrt(n[1]), 5.5/sqrt(n[2]), 5.5/sqrt(n[3]), 5.5/sqrt(n[4]),
5.5/sqrt(n[5]), 5.5/sqrt(n[6]))
invsigma2 = 1/(sigma^2)
data <- list("y" = y, "n" = n, "N" = N, "invsigma2" = invsigma2) # "mu0" = 20, "g0" = 1/0.001, "a_t" = 0.1, "b_t" = 0.1)
jm <- jags.model("normal-normal-gamma.jags", data = data, quiet = TRUE)
cat("
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(mu_i[i], invsigma2[i])
# invsigma2[i] <- n[i]/(sigma*sigma)
}
## priors
for (i in 1:N){
mu_i[i] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(20, 1/.001)
invtau2 ~ dgamma(.1, .1)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
N = length(y)
sigma <- c(5.5/sqrt(n[1]), 5.5/sqrt(n[2]), 5.5/sqrt(n[3]), 5.5/sqrt(n[4]),
5.5/sqrt(n[5]), 5.5/sqrt(n[6]))
invsigma2 = 1/(sigma^2)
data <- list("y" = y, "n" = n, "N" = N, "invsigma2" = invsigma2) # "mu0" = 20, "g0" = 1/0.001, "a_t" = 0.1, "b_t" = 0.1)
jm <- jags.model("normal-normal-gamma.jags", data = data, quiet = TRUE)
cat("
model {
## sampling
for (i in 1:N){
y[i] ~ dnorm(mu_i[i], invsigma2[i])
# invsigma2[i] <- n[i]/(sigma*sigma)
}
## priors
for (i in 1:N){
mu_i[i] ~ dnorm(mu, invtau2)
}
## hyperpriors
mu ~ dnorm(20, 1/.001)
invtau2 ~ dgamma(.1, .1)
tau <- sqrt(pow(invtau2, -1))
}
", file = "normal-normal-gamma.jags")
N = length(y)
sigma <- c(5.5/sqrt(n[1]), 5.5/sqrt(n[2]), 5.5/sqrt(n[3]), 5.5/sqrt(n[4]),
5.5/sqrt(n[5]), 5.5/sqrt(n[6]))
invsigma2 = 1/(sigma^2)
data <- list("y" = y, "N" = N, "invsigma2" = invsigma2) # "mu0" = 20, "g0" = 1/0.001, "a_t" = 0.1, "b_t" = 0.1)
jm <- jags.model("normal-normal-gamma.jags", data = data, quiet = TRUE)
samps <- coda.samples(jm, variable.names = "mu", n.iter = 10000)
ests <- summary(samps, quantiles = c(.025, .975))
ests
inits <- list(mu = 20, invtau2 = 1/10^2)
posterior <- r.jags(cat,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_i"),
adapt = 1000,
burnin = 1000,
sample = 1000,
inits = inits)
inits <- list(mu = 20, invtau2 = 1/10^2)
posterior <- rjags(cat,
n.chains = 1,
data = the_data,
monitor = c("mu", "tau", "mu_i"),
adapt = 1000,
burnin = 1000,
sample = 1000,
inits = inits)
posterior <- rjags(cat,
n.chains = 1,
data = data,
monitor = c("mu", "tau", "mu_i"),
adapt = 1000,
burnin = 1000,
sample = 1000,
inits = inits)
sum(y)
sum(y)/N
library(bayesplot)
install.packages("bayesplot")
install.packages("bayesplot")
library(bayesplot)
mcmc_hist(samps)
Sarah
S <- 1
a <- 2
r <- 3
h <- 4
C <- 8
l <- 3
e <- 2
b <- .5
Sarah
S*a*r*a*h
C*a*l*e*b
Sarah <- S*a*r*a*h
Caleb <- C*a*l*e*b
Sarah == Caleb
Sarah == Caleb
Sarah == Caleb
Sara == Caleb
vector <- c(1,2,5,3,8)
vector <- c(1,2,5,3,8)
coefficient <- 3
vector * coefficient
sort(vector, decreasing = FALSE)
svector <- sort(vector, decreasing = FALSE)
vector *svector
coefficient <- sum(vector)
coefficient <- mean(vector)
mvector <- vector * coefficient
vector
mvector
svector
a <- 1
a <- 1
Sarah <- 21
Caleb <- 20
Sarah < Caleb
Sarah > Caleb
Sarah == Caleb
x<-0
while(x<.6){
repeat message(runif(1))
}
# secondary axis!
df <- data.frame(day = 1:3, temp = c(70,80,90))
ggplot(df, aes(day, temp)) +
geom_point() +
scale_y_continuous(sec.axis = sec_axis(trans = ~.x))
# Comp Stats Notes 9/29
library(ggplot2)
# secondary axis!
df <- data.frame(day = 1:3, temp = c(70,80,90))
ggplot(df, aes(day, temp)) +
geom_point() +
scale_y_continuous(sec.axis = sec_axis(trans = I))
ggplot(df, aes(day, temp)) +
geom_point() +
scale_y_continuous(sec.axis = sec_axis(trans = ~.x))
ggplot(df, aes(day, temp)) +
geom_point() +
scale_y_continuous(name = expression(degrees*F),
sec.axis = sec_axis(trans = f_to_c, name = expression(degrees*C)))
ggplot(df, aes(day, temp)) +
geom_point() +
scale_y_continuous(name = expression(degrees*F),
sec.axis = sec_axis(trans = f_to_c, name = expression(degrees*C))) +
scale_color_gradient2(low = "red", middle = "white", high = "green")
# transforming the second axis
ggplot(df, aes(day, temp)) +
geom_point() +
scale_y_continuous(sec.axis = sec_axis(trans = ~.x)) +
scale_color_gradient2(low = "red", middle = "white", high = "green")
# transforming the second axis
ggplot(df, aes(day, temp)) +
geom_point() +
scale_y_continuous(sec.axis = sec_axis(trans = ~.x)) +
scale_color_gradient2(low = "red", mid = "white", high = "green")
View(df)
source("~/Desktop/Rock Chucks/Miscellaneous/Coding/R Projects/College Football/PARS CFB/PARS CFB Ratings.R")
setwd("~/Desktop/Rock Chucks/Miscellaneous/Coding/R Projects/College Football/PARS CFB")
source("~/Desktop/Rock Chucks/Miscellaneous/Coding/R Projects/College Football/PARS CFB/PARS CFB Ratings.R")
win_percentage <- round(pnorm(dfhome$Prediction, 0, change_sd),3) %>% view()
df1 %>% add_column(win_percentage)
df1 %>% add_column(win_percentage) %>% view()
df1 %>% add_column("Win Percentage" = win_percentage) %>% view()
df1 %>% add_column(win_percentage) %>% view()
mutate("Win_Percentage" = x) %>% select(-x) %>% view()
mutate("Win_Percentage" = win_percentage) %>% select(-x) %>% view()
df1 %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) %>% view()
WPercent <- df1 %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) %>% view()
ggplot(WPercent) +
geom_histogram(aes(Win_Percentage))
WPercent <- df1 %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) %>% view()
WPercent <- dfhome %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) %>% view()
WPercent <- dfhome %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) # %>% view()
WPercent <- dfhome %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) %>% view()
ggplot(WPercent) +
geom_point(win_percentage, Margin)
WPercent <- dfhome %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) %>% view()
ggplot(WPercent) +
geom_point(Win_Percentage, Margin)
WPercent <- dfhome %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) %>% view()
WPercent <- dfhome %>% add_column(win_percentage) %>%
mutate(Win_Percentage = x) %>% select(-x) %>% view()
ggplot(WPercent) +
geom_point(Win_Percentage, Margin)
ggplot(WPercent) +
geom_point(aes(Win_Percentage, Margin))
WPercent <- dfhome %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) %>% view()
ggplot(WPercent) +
geom_point(aes(Win_Percentage, Margin))
ggplot(WPercent) +
geom_point(aes(Win_Percentage, Margin)) +
geom_smooth()
ggplot(WPercent) +
geom_point(aes(Win_Percentage, Margin, color = Result))
ggplot(WPercent) +
geom_point(aes(Win_Percentage, Margin, color = Result)) +
geom_smooth()
ggplot(WPercent, aes(Win_Percentage, Margin)) +
geom_point(aes(color = Result)) +
geom_smooth()
WPercent <- dfhome %>% add_column(win_percentage) %>%
mutate("Win_Percentage" = x) %>% select(-x) # %>% view()
# Win Percentage vs Margin
ggplot(WPercent, aes(Win_Percentage, Margin)) +
geom_point(aes(color = Result)) +
geom_smooth()
# categorizing prediction and numerating the results
home_summaries <- dfhome %>%
mutate(
Pred_Category = case_when(
Prediction > 60 ~ 62.5,
Prediction > 55 ~ 57.5,
Prediction > 50 ~ 52.5,
Prediction > 45 ~ 47.5,
Prediction > 40 ~ 42.5,
Prediction > 35 ~ 37.5,
Prediction > 30 ~ 32.5,
Prediction > 25 ~ 27.5,
Prediction > 20 ~ 22.5,
Prediction > 15 ~ 17.5,
Prediction > 10 ~ 12.5,
Prediction > 5 ~ 7.5,
Prediction > 0 ~ 2.5,
Prediction > -5 ~ -2.5,
Prediction > -10 ~ -7.5,
Prediction > -15 ~ -12.5,
Prediction > -20 ~ -17.5,
Prediction > -25 ~ -22.5,
Prediction > -30 ~ -27.5,
Prediction > -35 ~ -32.5,
Prediction > -40 ~ -37.5,
Prediction > -45 ~ -42.5,
Prediction > -50 ~ -47.5,
Prediction > -55 ~ -52.5,
Prediction > -60 ~ -57.5,
TRUE ~ -62.5),
Wins = if_else(Result == "Win", 1, 0),
Losses = if_else(Result == "Loss", 1, 0)) %>% view()
# bar graph of home summaries
ggplot(home_summaries, aes(Pred_Category)) +
geom_bar(aes(fill = Result), position = "dodge")
# summarizing the above df
hs <- home_summaries %>%
group_by(Pred_Category) %>%
summarize(
Wins = sum(Wins),
Losses = sum(Losses),
Win_Percent = Wins/(Losses + Wins)
) %>% view()
win_percentage2 <- round(pnorm(hs$Pred_Category, 0, change_sd), 3) %>% view()
hs1 <- hs %>% add_column(win_percentage2) %>%
mutate("Theoretical" = x) %>% select(-x) %>% view()
hs <- home_summaries %>%
group_by(Pred_Category) %>%
summarize(
Wins = sum(Wins),
Losses = sum(Losses),
Experimental = Wins/(Losses + Wins)
) # %>% view()
win_percentage2 <- round(pnorm(hs$Pred_Category, 0, change_sd), 3) # %>% view()
hs1 <- hs %>% add_column(win_percentage2) %>%
mutate("Theoretical" = x) %>% select(-x) %>% view()
win_percentage2 <- round(pnorm(hs$Pred_Category, 0, change_sd), 3) # %>% view()
hs1 <- hs %>% add_column(win_percentage2) %>% view()
mutate("Theoretical" = win_percentage2) %>% select(-winpercentage2) %>% view()
hs1 <- hs %>% add_column(win_percentage2) %>% view()
hs1 <- hs %>% add_column(win_percentage2) %>%
mutate("Theoretical" = win_percentage2) %>% select(-win_percentage2) %>% view()
ggplot(hs1) +
geom_point(aes(Theoretical, Experimental))
ggplot(hs1) +
geom_point(aes(Theoretical, Experimental)) +
geom_smooth()
ggplot(hs1, aes(Theoretical, Experimental)) +
geom_point() +
geom_smooth()
hs1 <- hs %>% add_column(win_percentage2) %>%
mutate("Theoretical" = win_percentage2,
"Difference" = Theoretical - Experimental) %>%
select(-win_percentage2) # %>% view()
ggplot(hs1, aes(Theoretical, Experimental)) +
geom_point() +
geom_smooth()
ggplot(hs1, aes(Theoretical, Difference)) +
geom_point
ggplot(hs1, aes(Theoretical, Difference)) +
geom_point()
source("~/Desktop/Rock Chucks/Miscellaneous/Coding/R Projects/globalhealth/Global Health Code.R")
setwd("~/Desktop/Rock Chucks/Miscellaneous/Coding/R Projects/globalhealth")
source("~/Desktop/Rock Chucks/Miscellaneous/Coding/R Projects/globalhealth/Global Health Code.R")
df18$Q18[2]
df18$Q18[2] == "I don't know"
df18$Q18[2] == "I don/'t know"
df18$Q18[2] == "I don’t know"
